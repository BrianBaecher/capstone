@using Capstone.Shared.Models
@using Capstone.Services
@inject ReservationService reservationService
@inject SessionState sessionState
@inject DialogService dialogService

<RadzenCard Variant="Variant.Outlined">
	<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly" AlignItems="AlignItems.Center" Gap=".5rem">
		<DestinationCard Destination="Destination" />

		<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
			<RadzenStack Orientation=Orientation.Horizontal JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
				<RadzenStack>
					<RadzenLabel Text="Select Start Date" Component="startDatePicker" />
					<RadzenStack Orientation="Orientation.Horizontal">
						<RadzenDatePicker @bind-Value=startDate
										  Name="startDatePicker"
										  Min="DateTime.Today"
										  ShowInput=false
										  Change="@(() => SetNumDays())" />
						<RadzenText TextStyle="TextStyle.Body1">
							Start Date: <RadzenText TextStyle="TextStyle.Body1" class="@(!startDate.HasValue ? "rz-color-warning-dark" : string.Empty)">
								@(startDate.HasValue? startDate.Value.ToShortDateString() : "No selection")
							</RadzenText>
						</RadzenText>
					</RadzenStack>
				</RadzenStack>
				<RadzenStack>
					<RadzenLabel Text="Select End Date" Component="endDatePicker" />
					<RadzenDatePicker @bind-Value=endDate
									  Name="endDatePicker"
									  ShowInput=false
									  Min="@(startDate.HasValue? startDate.Value.Date.AddDays(1) : null)"
									  Change="@(() => SetNumDays())" />
				</RadzenStack>
			</RadzenStack>

			@if (startDate.HasValue && endDate.HasValue)
			{
				<RadzenRow JustifyContent="JustifyContent.SpaceEvenly" AlignItems="AlignItems.Center">
					<RadzenText TextStyle="TextStyle.Body1">
						Duration of Stay: @(numDays.ToString() + (numDays == 1 ? " day" : " days"))
					</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1">
						Price of Stay: @GetFormattedStayPrice()
					</RadzenText>
				</RadzenRow>
				<RadzenRow JustifyContent="JustifyContent.SpaceEvenly" AlignItems="AlignItems.Center">
					@if (sessionState.CurrentUser == null)
					{
						<RadzenText TextStyle="TextStyle.Body1">
							Please <RadzenButton Click="OnLoginRegisterClick">Login or Register</RadzenButton> in order to reserve a trip.
						</RadzenText>
					}
					else
					{
						<RadzenButton ButtonStyle="ButtonStyle.Success"
									  Text="Reserve"
									  Icon="checked_bag"
									  Disabled=@(!startDate.HasValue || !endDate.HasValue )
									  Click="ReserveTrip" />
						<RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Cancel" Icon="delete" Click="OnCancelClick" />
					}
				</RadzenRow>
			}
			@if (successFragment != null)
			{
				@successFragment
			}
		</RadzenStack>
	</RadzenStack>
</RadzenCard>

@code {
	[Parameter]
	public required Destination Destination { get; set; }

	DateTime? startDate;
	DateTime? endDate;
	int numDays;

	RenderFragment? successFragment;

	private void SetNumDays()
	{
		if (!startDate.HasValue || !endDate.HasValue) return;

		numDays = (endDate.Value.Date - startDate.Value.Date).Days;
	}

	private string GetFormattedStayPrice()
	{
		var price = (float)(numDays * Destination.PricePerDay);

		return price.ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("en-US"));
	}

	private async Task ReserveTrip()
	{
		if (sessionState.CurrentUser == null) return;

		TripReservation tripReservation = new()
		{
			Destination = Destination,
			StartDate = startDate!.Value,
			EndDate = endDate!.Value,
			User = sessionState.CurrentUser,
			Price = (float)(numDays * Destination.PricePerDay)
		};

		var isSuccess = await reservationService.CreateReservationAsync(tripReservation);

		string successMsg = $"Your trip to {Destination.Name} has been reserved!";

		successFragment =@<SuccessIndicator IsSuccess=isSuccess
						  FailureMessage="Error reserving trip"
						  SuccessMessage=@successMsg />
		;
	}

	private void OnCancelClick()
	{
		startDate = null; endDate = null; successFragment = null;
	}

	private async Task OnLoginRegisterClick()
	{
		var modal = await dialogService.OpenAsync<Capstone.Components.Login_Register.LoginComponent>(
			title: ""
		);
	}
}

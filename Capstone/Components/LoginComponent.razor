@using Radzen
@using Radzen.Blazor
@using Capstone.Services
@using Capstone.Shared.Models
@inject AuthService authService
@inject SessionState sessionState
@inject DialogService dialogService // login displayed as modal, dialogService handles modals...

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
	@if (isRegister)
	{
		<RegistrationForm OnRegistrationSuccess="Close" />
	}
	else
	{
		<RadzenTemplateForm Data=@("LoginWithDefaultValues")>
			<RadzenLogin AllowRegister="true" AllowResetPassword="true" Username=@username Password=@password
						 AllowRememberMe="true" RememberMe="@rememberMe"
						 Login=@(args => OnLogin(args))
						 ResetPassword=@(args => OnResetPassword(args))
						 Register=@(_ => OnRegister()) />
		</RadzenTemplateForm>
	}
</RadzenCard>

@code {
	string username = string.Empty;
	string password = string.Empty;
	bool rememberMe;

	bool isRegister;
	bool isResetPassword;

	private async Task OnLogin(LoginArgs loginArgs)
	{
		var loginResponse = await authService.LoginAsync(loginArgs.Username, loginArgs.Password);
		if (loginResponse == null)
		{
			// failed login
			return;
		}
		// set active user?
		await sessionState.SetUserAsync(loginResponse.User, loginResponse.Token);
		Close();
	}

	private void OnResetPassword(string arg)
	{

	}

	private void OnRegister()
	{
		isRegister = true;
		isResetPassword = false;
	}

	private void Close()
	{
		dialogService.Close();
	}
}

@using Radzen.Blazor
@using Capstone.Shared.Models
@inject DestinationService destService
@inject TestimonialService testService



<RadzenCard class="rz-p-4"
			Variant="Radzen.Variant.Outlined"
			Style="max-width: 600px;">
	<RadzenCarousel @ref=carousel
					@bind-SelectedIndex="@selectedIndex"
					Auto="@auto" Interval="@interval"
					PagerOverlay="false"
					ButtonShade="Radzen.Shade.Default"
					Style=@GetCauroselStyle()>
		<Items>
			@if (isDestination)
			{
				foreach (var dest in destinations)
				{
					<RadzenCarouselItem>
						<DestinationCard Destination="dest"
										 IsPreview=true />
					</RadzenCarouselItem>
				}
			}
			else if (isTestimonial)
			{
				foreach (var test in testimonials)
				{
					<RadzenCarouselItem>
						<RadzenStack>
							<RadzenText TextStyle="TextStyle.Body2">
								@test.Content
							</RadzenText>
							<RadzenText TextStyle="TextStyle.Subtitle1">
								@test.Author
							</RadzenText>
						</RadzenStack>
					</RadzenCarouselItem>
				}
			}
		</Items>
	</RadzenCarousel>
</RadzenCard>


@code {
	[Parameter]
	public required Type ItemType { get; set; }

	RadzenCarousel carousel;

	bool auto = true;
	double interval = 4000;
	string toggleText = "Stop";

	Destination[] destinations = [];
	bool isDestination;

	Testimonial[] testimonials = [];
	bool isTestimonial;

	bool started = true;
	void Toggle()
	{
		if (started)
		{
			carousel.Stop();
			toggleText = "Start";
		}
		else
		{
			carousel.Start();
			toggleText = "Stop";
		}

		started = !started;
	}

	int selectedIndex;


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (ItemType == typeof(Destination))
		{
			isDestination = true;
			destinations = await destService.GetAllAsync();
		}
		else if (ItemType == typeof(Testimonial))
		{
			isTestimonial = true;
			var asList = await testService.GetAllAsync();
			testimonials = asList.ToArray();
		}
		else
		{
			throw new Exception("Invalid type passed to caurosel");
		}

	}

	private string GetCauroselStyle()
	{
		return isDestination ? "height:500px" : "height: 200px";
	}
}

@using Capstone.Shared.Models
@using Capstone.Services

@inject AuthService authService

<RadzenStack JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
	<RadzenRow>
		<RadzenButton Text="Back to Login"
					  ButtonStyle="ButtonStyle.Secondary"
					  Click="@((_)=>OnBack.InvokeAsync())" />
	</RadzenRow>
	<RadzenSplitButton Click="OnSplitButtonValueChange" Text="@(info.UseEmail ? "Using Email" : "Using Account Name")">
		<ChildContent>
			<RadzenSplitButtonItem Text="Use Email" Value="email" />
			<RadzenSplitButtonItem Text="Use Account Name" Value="username" />
		</ChildContent>
	</RadzenSplitButton>
	<RadzenTemplateForm TItem="ResetPasswordInfo" Data="info" Submit="OnSubmit">
		@if (info.UseEmail)
		{
			<RadzenFormField Text="Your Email Address" Style="width: 100%;">
				<RadzenTextBox Name="Email" @bind-Value="@info.Email" />
				<RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup=@popup />
			</RadzenFormField>
		}
		else
		{
			<RadzenFormField Text="Your Username" Style="width: 100%;">
				<RadzenTextBox @bind-Value="@info.Username" />
			</RadzenFormField>
		}
		<RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Register" />
	</RadzenTemplateForm>
	@if (isRequestSent)
	{
		if(submitMsg == null)
		{
			<RadzenIcon Icon="cycle" class="spin"/>
		}
		else
		{
			<RadzenText TextStyle="TextStyle.Body1">
				@submitMsg
			</RadzenText>
			<RadzenButton ButtonStyle="ButtonStyle.Primary" Text="OK" Click="@((_) => CloseEvent.InvokeAsync())" />
		}
	}
</RadzenStack>


@code {
	ResetPasswordInfo info = new();

	bool popup;

	[Parameter]
	public EventCallback CloseEvent { get; set; }

	[Parameter]
	public EventCallback OnBack { get; set; }

	string? submitMsg;

	private void OnSplitButtonValueChange(RadzenSplitButtonItem item)
	{
		info.UseEmail = string.Equals("email", item.Value);
	}

	bool isRequestSent;
	private async Task OnSubmit()
	{
		isRequestSent = true;
		submitMsg = await authService.ResetPasswordRequestAsync(info);
	}
}

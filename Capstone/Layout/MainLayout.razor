@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject Capstone.Services.SessionState sessionState
@inject Radzen.DialogService dialogService
@using Microsoft.AspNetCore.Components;

<div class="page">
	<main>
		<RadzenComponents @rendermode="RenderMode.InteractiveWebAssembly" />
		<RadzenStack Orientation="Radzen.Orientation.Vertical">
			<RadzenRow JustifyContent="Radzen.JustifyContent.SpaceBetween" class="rz-mx-9">
				<RadzenImage Path="images/logo.png"
							 AlternateText="Travlr Getaways logo"
							 Style="max-width: 15rem;" />

				@if (sessionState.CurrentUser == null)
				{
					<RadzenButton ButtonType="Radzen.ButtonType.Button"
								  ButtonStyle="Radzen.ButtonStyle.Light"
								  Icon="login"
								  Text="Login"
								  Click="@((_) => ShowLoginModal())" />
				}
				else
				{
					<Capstone.Components.ProfileComponent User="sessionState.CurrentUser"
														  OnLogout="OnLogout" />
				}
			</RadzenRow>
			<RadzenRow JustifyContent="@Radzen.JustifyContent.Center">
				<RadzenTabs SelectedIndex="@selectedIndex"
							Change="@OnTabChange"
							TabPosition="@TAB_POSITION"
							RenderMode="@Radzen.TabRenderMode.Client">
					<Tabs>
						<RadzenTabsItem Text="Home" />
						<RadzenTabsItem Text="Travel" />
						<RadzenTabsItem Text="News" />
						<RadzenTabsItem Text="About" />
						<RadzenTabsItem Text="Contact" />
					</Tabs>
				</RadzenTabs>
			</RadzenRow>
		</RadzenStack>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
	private int selectedIndex = 0;

	const Radzen.TabPosition TAB_POSITION = Radzen.TabPosition.Top;


	private static Dictionary<int, string> _routeDict = new()
	{
		{0, "/"},
		{1, "/travel"},
		{2, "/news"},
		{3, "/about"},
		{4, "/contact"}
	};

	private void OnTabChange(int index)
	{
		Console.WriteLine(index);
		if (_routeDict.TryGetValue(index, out var route))
		{
			selectedIndex = index;
			Navigation.NavigateTo(route);
		}
		else
		{
			throw new KeyNotFoundException("invalid index in tabs");
		}
	}

	private void OnLogout()
	{
		StateHasChanged();
	}

	private async Task ShowLoginModal()
	{
		var modal = await dialogService.OpenAsync<Capstone.Components.Login_Register.LoginComponent>(
			title: ""
		);
	}
}